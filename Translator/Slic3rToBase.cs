using System;
using System.IO;
using System.Text;
using Take4.Rs274ngcParser;
using System.Runtime.Serialization;

namespace Take4.Translator {
	/// <summary>
	/// ファイルがSlic3rかどうか判断し、必要なパラメータを取得する。
	/// 現状は、ファイルの先頭に1.3.0のScic3rのヘッダーがあった場合、該当するファイルとして認識している
	/// </summary>
	internal class CheckAndGetParameter {
		/// <summary>
		/// 印刷速度(mm/秒)
		/// </summary>
		public int PerimeterSpeed = 60;
		/// <summary>
		/// 移動速度(mm/秒)
		/// </summary>
		public int TravelSpeed = 80;
		/// <summary>
		/// 1層目のノズル温度
		/// </summary>
		public int FirstLayerNozzelTemp = 0;
		/// <summary>
		/// 1層目のベッド温度
		/// </summary>
		public int FirstLayerBedTemp = 0;

		/// <summary>
		/// データのチェックと、処理パラメータの取得
		/// </summary>
		/// <param name="inputFile"></param>
		/// <returns></returns>
		public bool Check(Stream inputFile) {
			inputFile.Seek(0, SeekOrigin.Begin);
			if (inputFile.Length > 0) {
				using (var input = new StreamReader(inputFile, Encoding.ASCII, false, 4096, true)) {
					var result = input.ReadLine();
					if (result.StartsWith("; generated by Slic3r 1.3.0")) {
						while (!input.EndOfStream) {
							result = input.ReadLine();
							if (result.StartsWith("; travel_speed ")) {
								var words = result.Split('=');
								if (words.Length == 2) {
									int.TryParse(words[1].Trim(), out TravelSpeed);
								}
							}
							else if (result.StartsWith("; perimeter_speed ")) {
								var words = result.Split('=');
								if (words.Length == 2) {
									int.TryParse(words[1].Trim(), out PerimeterSpeed);
								}
							}
							else if (result.StartsWith("; first_layer_bed_temperature ")) {
								var words = result.Split('=');
								if (words.Length == 2) {
									int.TryParse(words[1].Trim(), out FirstLayerBedTemp);
								}
							}
							else if (result.StartsWith("; first_layer_temperature ")) {
								var words = result.Split('=');
								if (words.Length == 2) {
									int.TryParse(words[1].Trim(), out FirstLayerNozzelTemp);
								}
							}
						}
						return true;
					}
				}
			}
			return false;
		}
	}

	/// <summary>
	/// Scli3rのファイルを、修正のベース処理<see cref="ToAdventurer3"/>に渡せるような内容に変更する
	/// </summary>
	[DataContract]
	public class Slic3rToBase : ICommandActor {
		/// <summary>
		/// Z軸の移動スピードの変更値
		/// </summary>
		int speedZ_ = 30;

		/// <summary>
		/// ファイルのパラメータ解析処理
		/// </summary>
		CheckAndGetParameter checker_ = new CheckAndGetParameter();

		/// <summary>
		/// 出力を制御するためのステータス
		/// </summary>
		enum SkipLineType {
			/// <summary>
			/// ヘッダーをスキップする
			/// </summary>
			HeaderSkip,
			/// <summary>
			/// フッターをスキップする
			/// </summary>
			FooterSkip,
			/// <summary>
			/// データをスキップせず、内容を解析して、いろいろ処理する
			/// </summary>
			NoSkip,
		}
		SkipLineType skipLine_ = SkipLineType.HeaderSkip;

		/// <summary>
		/// Z軸の移動スピード
		/// </summary>
		[DataMember]
		public int SpeedZ {
			get => speedZ_;
			set => SetProperty(ref speedZ_, value);
		}

		void SetProperty<T>(ref T target, T source) {
			target = source;
		}

		/// <summary>
		/// 1行処理
		/// </summary>
		/// <param name="line">1行の解析データ</param>
		/// <returns>falseの場合、異常があった</returns>
		public bool ActionLine(LineCommand line) {
			Double value;
			int position;

			switch (skipLine_) {
			case SkipLineType.HeaderSkip:
				if (line.TryGetValue('M', out value, out position)) {
					if (value == 82) {
						// M82までヘッダーをスキップする
						skipLine_ = SkipLineType.NoSkip;
					}
				}
				break;
			case SkipLineType.NoSkip:
				if (!string.IsNullOrEmpty(line.Comment) && line.Comment.StartsWith(";END gcode for filament")) {
					skipLine_ = SkipLineType.FooterSkip;
				}
				if (line.TryGetValue('G', out value, out position)) {
					if (value == 1) {
						if (line.Has('Z')) {
							line.Modify('F', (x) => x.Value = speedZ_);
						}
					}
				}
				if (line.TryGetValue('M', out value, out position)) {
					if ((value == 104 || value == 140) && !line.Has('T')) {
						line.Add('T', 0);   // 最後にT0を付ける
					}
				}
				outputFile_.WriteLine(OutputGCode.ToString(line));
				break;
			case SkipLineType.FooterSkip:
				// 何もしない
				break;
			}
			return true;
		}

		/// <summary>
		/// 事後処理
		/// </summary>
		public void PostAction() {
			outputFile_.Flush();
		}

		/// <summary>
		/// 事前処理
		/// </summary>
		public void PreAction() {
			// 書き換えたヘッダー部を出力する
			outputFile_.WriteLine("; generated by Slic3r take4");
			outputFile_.WriteLine(string.Format(";   defaultSpeed,{0}", checker_.PerimeterSpeed * 60));
			outputFile_.WriteLine(string.Format(";   rapidZspeed,{0}", speedZ_));
			outputFile_.WriteLine(string.Format(";   rapidXYspeed,{0}", checker_.TravelSpeed * 60));
			outputFile_.WriteLine("G90");
			outputFile_.WriteLine("M82");
			outputFile_.WriteLine("M107");
			outputFile_.WriteLine(string.Format("M140 S{0} T0", checker_.FirstLayerBedTemp));
			outputFile_.WriteLine(string.Format("M104 S{0} T0", checker_.FirstLayerNozzelTemp));
			outputFile_.WriteLine("M104 S0 T1");
			outputFile_.WriteLine("; start gcode");
			skipLine_ = SkipLineType.HeaderSkip;    // M82までのヘッダーをスキップするため
		}

		StreamWriter outputFile_;

		/// <summary>
		/// ファイルの更新処理
		/// </summary>
		/// <param name="inputFile">入力ファイル</param>
		/// <param name="outputFile">出力ファイル</param>
		/// <returns>更新が正しく終了した場合true</returns>
		public bool Modify(Stream inputFile, Stream outputFile) {
			outputFile_ = new StreamWriter(outputFile, Encoding.ASCII, 4096, true);
			checker_ = new CheckAndGetParameter();
			if (checker_.Check(inputFile) && checker_.FirstLayerNozzelTemp != 0) {
				// Slic3rのファイルでかつ1層目の温度設定が読み込めた場合処理を続行する
				var modifier = new ParseGCodeStream();
				inputFile.Seek(0, SeekOrigin.Begin);
				return modifier.Parse(inputFile, this);
			}
			return false;
		}
	}
}
